// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package colony

import "testing"

func TestComplex64Colony(t *testing.T) {
	colony := NewComplex64Colony(1)
	t.Run("Insert", func(t *testing.T) {
		newT := new(complex64)
		tp := colony.Insert(newT)
		if *tp != *newT {
			t.Fatalf("value of pointer returned from Insert does not equal the inserted value: (*newT) %v != (*tp) %v", *newT, *tp)
		}
	})
	t.Run("Delete", func(t *testing.T) {
		newT := new(complex64)
		tp := colony.Insert(newT)
		colony.Delete(tp)
		tp2 := colony.Insert(newT)
		if tp != tp2 { // both should be allocated to the same spot
			t.Fatalf("deletion failed")
		}
	})
}

var Complex64Benchmarks = []struct {
	name  string
	count uint
}{
	{"10", 10},
	{"100", 100},
	{"1000", 1000},
	{"10000", 10000},
	{"100000", 100000},
}

func BenchmarkComplex64Colony_Insert(b *testing.B) {
	for _, bm := range Complex64Benchmarks {
		b.Run(bm.name, func(count uint) func(*testing.B) {
			return func(b *testing.B) {
				// setup
				colony := NewComplex64Colony(count / 5)
				newcomplex64 := new(complex64)

				b.ReportAllocs()
				b.ResetTimer()

				for i := 0; i < b.N; i++ {
					for j := 0; uint(j) < count; j++ {
						newcomplex64 = colony.Insert(newcomplex64)
					}
				}
			}
		}(bm.count))
	}
}

func BenchmarkComplex64Slice(b *testing.B) {
	for _, bm := range Complex64Benchmarks {
		b.Run(bm.name, func(count uint) func(*testing.B) {
			return func(b *testing.B) {
				// setup
				arr := make([]complex64, count/5)
				newcomplex64 := new(complex64)

				b.ReportAllocs()
				b.ResetTimer()

				for i := 0; i < b.N; i++ {
					for j := 0; uint(j) < count; j++ {
						arr = append(arr, *newcomplex64)
					}
				}
			}
		}(bm.count))
	}
}
